from langchain.tools import Tool
from langchain.agents import AgentExecutor, initialize_agent, BaseSingleActionAgent, AgentType
from langchain_deepseek import ChatDeepSeek
from langchain_community.tools import DuckDuckGoSearchRun
from typing import List, Tuple, Any, Union
from langchain.schema import AgentAction, AgentFinish
from dotenv import load_dotenv
import os
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
search = DuckDuckGoSearchRun()

def validate_file_path(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
    if not path or not isinstance(path, str):
        return False
    if re.search(r'\.\.|/etc/|/root|/var/|/usr/', path):
        return False
    return True

def read_file(file_path: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if not validate_file_path(file_path):
        return "–û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
    try:
        with open(file_path, 'r') as f:
            return f.read()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}"

from langchain.tools import StructuredTool, tool
from typing import Optional
import subprocess
import datetime

DANGEROUS_COMMANDS = ['rm', 'chmod', 'chown', 'dd', 'mv', '>', '>>']
SAFE_COMMANDS = ['ls', 'cat', 'grep', 'find', 'pwd', 'echo', 'mkdir']

# –°—Ç—Ä–æ–≥–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
STOP_WORDS_RU = ['—Å—Ç–æ–ø', '–ø—Ä–µ–∫—Ä–∞—Ç–∏', '–ø–µ—Ä–µ—Å—Ç–∞–Ω—å', '–≤—ã—Ö–æ–¥', '–∑–∞–≤–µ—Ä—à–∏', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å', '—Ö–≤–∞—Ç–∏—Ç']
STOP_WORDS_EN = ['stop', 'exit', 'quit', 'end', 'abort', 'cancel']

def is_stop_command(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥–æ–π (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)"""
    text = text.strip().lower()
    return text in STOP_WORDS_RU or text in STOP_WORDS_EN

def log_command(command: str, output: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    with open('command_history.log', 'a', encoding='utf-8') as f:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        f.write(f"[{timestamp}] {command}\n{output}\n\n")

# –ö–æ–¥—ã –æ—à–∏–±–æ–∫ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
APT_ERRORS = {
    100: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ apt",
    101: "–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ apt",
    102: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
    103: "–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
    104: "–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
}

SNAP_ERRORS = {
    1: "–û—à–∏–±–∫–∞ snapd",
    2: "–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
    3: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
}

def analyze_package_error(command: str, error: subprocess.CalledProcessError) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    if 'apt' in command:
        if error.returncode in APT_ERRORS:
            return f"APT –æ—à–∏–±–∫–∞: {APT_ERRORS[error.returncode]}\n{error.stderr}"
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ APT (–∫–æ–¥ {error.returncode}):\n{error.stderr}"
    elif 'snap' in command:
        if error.returncode in SNAP_ERRORS:
            return f"SNAP –æ—à–∏–±–∫–∞: {SNAP_ERRORS[error.returncode]}\n{error.stderr}"
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ SNAP (–∫–æ–¥ {error.returncode}):\n{error.stderr}"
    return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(error)}"

def request_sudo() -> bool:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç sudo-–ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from getpass import getpass
    try:
        password = getpass("–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        test_cmd = f"echo '{password}' | sudo -S true"
        subprocess.run(test_cmd, shell=True, check=True, stderr=subprocess.PIPE)
        return True
    except subprocess.CalledProcessError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å sudo")
        return False

def execute_command(command: str, ask_for_confirmation: bool = False) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if any(cmd in command for cmd in DANGEROUS_COMMANDS):
        if ask_for_confirmation:
            return "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"
        human_response = input(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∞—Å–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {command}? (y/n): ")
        if human_response.lower() != 'y':
            return "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ sudo
    if command.startswith('sudo ') and not request_sudo():
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sudo-–ø—Ä–∞–≤–∞"
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        output = result.stdout if result.stdout else result.stderr
        log_command(command, output)
        return output
    except subprocess.CalledProcessError as e:
        error_msg = analyze_package_error(command, e)
        log_command(command, error_msg)
        return error_msg

def write_file(file_path: str, content: str, create_dirs: bool = False) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    if not validate_file_path(file_path):
        return "–û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
    
    try:
        if create_dirs:
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        return f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}"

from pydantic import BaseModel, Field

class CommandInput(BaseModel):
    command: str = Field(description="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    ask_for_confirmation: bool = Field(default=False, description="–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

command_tool = StructuredTool.from_function(
    func=execute_command,
    name="command_executor",
    description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
    args_schema=CommandInput
)

write_file_tool = StructuredTool.from_function(
    func=write_file,
    name="write_file",
    description="–ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç file_path, content –∏ create_dirs."
)

class HelpSeekingAgent(BaseSingleActionAgent):
    def plan(self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs) -> Union[AgentAction, AgentFinish]:
        """–ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–º–æ—â–∏"""
        if intermediate_steps:
            last_response = intermediate_steps[-1][1]
            if any(phrase in last_response.lower() for phrase in ["–Ω–µ —É–≤–µ—Ä–µ–Ω", "–ø–æ–º–æ–≥–∏—Ç–µ", "–Ω–µ –∑–Ω–∞—é"]):
                return AgentAction(
                    tool="ask_human",
                    tool_input={"input_text": "–ù—É–∂–Ω–∞ –≤–∞—à–∞ –ø–æ–º–æ—â—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!"},
                    log=""
                )
        return super().plan(intermediate_steps, **kwargs)

def ask_human(input_text: str) -> str:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    answer = input(f"\nü§ñ –ê–≥–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å: {input_text}\nüëâ –í–∞—à –æ—Ç–≤–µ—Ç: ")
    return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: {answer}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
llm = ChatDeepSeek(
    model="deepseek-chat",
    temperature=0.3,
    api_key=os.getenv("DEEPSEEK_API_KEY")
)
tools = [
    Tool(
        name="ask_human",
        func=ask_human,
        description="–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏"
    ),
    Tool(
        name="read_file",
        func=read_file,
        description="–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞. –í—Ö–æ–¥: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."
    ),
    write_file_tool,
    command_tool,
    Tool(
        name="web_search",
        func=search.run,
        description="–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í—Ö–æ–¥: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
    )
]

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
agent = initialize_agent(
    tools,
    llm,
    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    max_iterations=5
)

if __name__ == "__main__":
    print("ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç —Å deepseek –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n")
    
    while True:
        query = input("–í–∞—à –∑–∞–ø—Ä–æ—Å: ")
        if is_stop_command(query):
            break
            
        try:
            response = agent.run(query)
            print(f"\n–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {response}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")