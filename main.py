–î–æ–±–∞–≤–∏–º –∞–≥–µ–Ω—Ç—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í–æ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:
–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
bash
Copy

pip install duckduckgo-search langchain-community python-dotenv

–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
2.1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
python
Copy

from langchain.tools import tool
from pydantic import BaseModel, Field
import os

class ReadFileInput(BaseModel):
    file_path: str = Field(description="–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")

@tool(args_schema=ReadFileInput, return_direct=False)
def read_file(file_path: str) -> str:
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞"""
    try:
        if not os.path.exists(file_path):
            return "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        with open(file_path, "r") as f:
            return f.read()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

2.2. –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
python
Copy

class WriteFileInput(BaseModel):
    file_path: str = Field(description="–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    content: str = Field(description="–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏")

@tool(args_schema=WriteFileInput, return_direct=False)
def write_file(file_path: str, content: str) -> str:
    """–ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        allowed_dirs = ["./data", "/tmp"]
        if not any(os.path.abspath(file_path).startswith(os.path.abspath(d)) for d in allowed_dirs):
            return "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
            
        with open(file_path, "w") as f:
            f.write(content)
        return "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

–®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
3.1. DuckDuckGo (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API-–∫–ª—é—á–∞)
python
Copy

from langchain_community.tools import DuckDuckGoSearchRun

search = DuckDuckGoSearchRun()

3.2. –ò–õ–ò Google Search (—á–µ—Ä–µ–∑ SerpAPI, —Ç—Ä–µ–±—É–µ—Ç API-–∫–ª—é—á)
bash
Copy

pip install google-search-results

python
Copy

from langchain_community.tools import SerpAPIWrapper

search = SerpAPIWrapper(serpapi_api_key="–≤–∞—à_–∫–ª—é—á")

–®–∞–≥ 4: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ
python
Copy

tools = [
    read_file,
    write_file,
    Tool(
        name="web_search",
        func=search.run,
        description="–ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
    ),
    # –†–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ask_human
    Tool(
        name="ask_human",
        func=ask_human,
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å —á–µ–ª–æ–≤–µ–∫–∞"
    )
]

–®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
python
Copy

from langchain_openai import ChatOpenAI
from langchain.agents import AgentType, initialize_agent

llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.3)

agent = initialize_agent(
    tools,
    llm,
    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True,
    max_iterations=5
)

–®–∞–≥ 6: –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–ß—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤:
python
Copy

result = agent.run(
    "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª report.txt –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ./data —Å —Ç–µ–∫—Å—Ç–æ–º 'Hello World', "
    "–∑–∞—Ç–µ–º –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º —Å–ª–æ–≤"
)
print(result)

–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:
python
Copy

result = agent.run(
    "–ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ SpaceX –∏ –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª spacex_news.txt"
)
print(result)

–®–∞–≥ 7: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

    –°—ç–Ω–¥–±–æ–∫—Å –¥–ª—è —Ñ–∞–π–ª–æ–≤:
    python
    Copy

    # –í —Ñ—É–Ω–∫—Ü–∏–∏ write_file –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:
    allowed_dirs = ["./data", "/tmp"]  # –¢–æ–ª—å–∫–æ —ç—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏

    –õ–∏–º–∏—Ç—ã –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤:
    python
    Copy

    MAX_FILE_SIZE = 1024 * 1024  # 1 MB
    if os.path.getsize(file_path) > MAX_FILE_SIZE:
        return "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"

    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
    python
    Copy

    BANNED_KEYWORDS = ["rm ", "del ", "format "]
    if any(kw in query.lower() for kw in BANNED_KEYWORDS):
        return "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"


–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

    –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω–∏—Ç–µ ChatOpenAI –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ LlamaCpp.

    –î–æ–±–∞–≤—å—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Chroma, FAISS) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.

–≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —É–º–µ–µ—Ç:

    üìÅ –ß–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)

    üåê –ò—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

    ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–º–æ—â—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ–º–±–∏–Ω–∏—Ä—É—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!